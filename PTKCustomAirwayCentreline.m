classdef PTKCustomAirwayCentreline < PTKPlugin
    % PTKCustomAirwayCentreline by Ashkan Pakzad, 2020. Plugin for finding the centreline of an
    % imported Airway segmentation (i.e. other than that generated by PTKAirways). 
    % Based on PTKAirwayCentreline by Tom Doel, 2012.
    %
    %     This is a plugin for the Pulmonary Toolkit. 
    %     See PTKPlugin.m for more information on how to run plugins.
    %     Plugins should not be run directly from your code.
    %
    %     PTKCustomAirwayCentreline calls the PTKAirways plugin to identify the tree structure
    %     of the already segmented airways.
    %     It then uses the PTKSkeletonise library routine to reduce the
    %     airway tree to a centreline and process it inorder to remove
    %     internal loops in the airway structure.
    %
    %     The output image is a binary image in the same space as the input
    %     segmentation.
    %
    %
    %     Licence
    %     -------
    %     Part of the TD Pulmonary Toolkit. https://github.com/tomdoel/pulmonarytoolkit
    %     Author: Ashkan Pakzad, 2020. ashkanpakzad.github.io
    %     Author: Tom Doel, 2012.  www.tomdoel.com
    %     Distributed under the GNU GPL v3 licence. Please see website for details.
    %    
    
    properties
        ButtonText = 'Airway <BR>Custom <BR>Centreline'
        ToolTip = 'Show airway custom skeletonisation results'
        Category = 'Airways'

        AllowResultsToBeCached = false
        AlwaysRunPlugin = false
        PluginType = 'ReplaceOverlay'
        HidePluginInDisplay = true
        FlattenPreviewImage = true
        PTKVersion = '1'
        ButtonWidth = 6
        ButtonHeight = 2
        GeneratePreview = false
        Visibility = 'Developer'
    end
    
    methods (Static)
        function results = RunPlugin(dataset, reporting)
            original_image = dataset.GetResult('PTKOriginalImage');
            
            % Find trachea
            reporting.ShowProgress('Finding the top of the trachea');
         
            threshold_image = original_image;
            [top_of_trachea, trachea_voxels] = PTKFindTopOfTrachea(threshold_image, reporting, PTKSoftwareInfo.GraphicalDebugMode);
            trachea_results = [];
            trachea_results.top_of_trachea = top_of_trachea;
            trachea_results.trachea_voxels = trachea_voxels;
            
            % Run Airway structure search
            threshold = original_image;
            
            threshold.SetIndexedVoxelsToThis(trachea_results.trachea_voxels, true);
            coronal_mode = false;
            start_point = trachea_results.top_of_trachea;

            maximum_number_of_generations = 15;
            
            explosion_multiplier = 4;

            debug_mode = PTKSoftwareInfo.GraphicalDebugMode;
            airway_results = PTKAirwayRegionGrowingWithExplosionControl(threshold, start_point, maximum_number_of_generations, explosion_multiplier, coronal_mode, reporting, debug_mode);
            
            % generate skeleton
            skeleton_results = PTKGetCentrelineFromAirways(airway_results, original_image, reporting);
            
            % convert to binary PTKimage
            
            new_image = zeros(original_image.ImageSize, 'uint8');
            new_image(original_image.GlobalToLocalIndices(skeleton_results.CentrelinePoints)) = 1;
            new_image(original_image.GlobalToLocalIndices(skeleton_results.BifurcationPoints)) = 1;
            
            results = original_image.BlankCopy;
            results.ChangeRawImage(new_image);
            
            results.SetVoxelToThis(skeleton_results.StartPoint, 1);
            

            
        end
            
        end
end